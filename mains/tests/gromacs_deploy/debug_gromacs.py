#%%
from grappa.ff import ForceField
from openmm.app import ForceField as openmm_ff
import openmm.unit
from openmm.app import PDBFile

ref_ff = openmm_ff("amber99sbildn.xml")
#ff = ForceField(model_path="/hits/fast/mbm/seutelf/grappa/mains/runs/param_search/versions/4_dotted_700_6_6/best_model.pt", classical_ff=ref_ff)

pdb_path = "AG/pep.pdb"
top = PDBFile(pdb_path).topology

model = ForceField.get_classical_model(top, ref_ff) # this model imitates the amber99sbildn forcefield. it is for testing only.

ff = ForceField(model=model, classical_ff=openmm.app.ForceField("amber99sbildn.xml"))

ff.units["angle"] = openmm.unit.degree

# %%
# hand over a pdbfile to our forcefield and it will return a parameter dict:
params = ff(pdb_path)
print("dict keys and mean values:")
print(*[(k, v.mean()) for (k,v) in zip(params.keys(), params.values())], sep="\n")
# %%

#%%

from grappa.ff_utils.create_graph.utils import graph_from_topology_dict


d = {"atoms": [[1, "ACE", "CT", [0.339967, 0.45773], 6], [2, "ACE", "HC", [0.264953, 0.0656888], 1], [3, "ACE", "HC", [0.264953, 0.0656888], 1], [4, "ACE", "HC", [0.264953, 0.0656888], 1], [5, "ACE", "C", [0.339967, 0.359824], 6], [6, "ACE", "O", [0.295992, 0.87864], 8], [7, "ALA", "N", [0.325, 0.71128], 7], [8, "ALA", "H", [0.106908, 0.0656888], 1], [9, "ALA", "CT", [0.339967, 0.45773], 6], [10, "ALA", "H1", [0.247135, 0.0656888], 1], [11, "ALA", "CT", [0.339967, 0.45773], 6], [12, "ALA", "HC", [0.264953, 0.0656888], 1], [13, "ALA", "HC", [0.264953, 0.0656888], 1], [14, "ALA", "HC", [0.264953, 0.0656888], 1], [15, "ALA", "C", [0.339967, 0.359824], 6], [16, "ALA", "O", [0.295992, 0.87864], 8], [17, "ALA", "N", [0.325, 0.71128], 7], [18, "ALA", "H", [0.106908, 0.0656888], 1], [19, "ALA", "CT", [0.339967, 0.45773], 6], [20, "ALA", "H1", [0.247135, 0.0656888], 1], [21, "ALA", "CT", [0.339967, 0.45773], 6], [22, "ALA", "HC", [0.264953, 0.0656888], 1], [23, "ALA", "HC", [0.264953, 0.0656888], 1], [24, "ALA", "HC", [0.264953, 0.0656888], 1], [25, "ALA", "C", [0.339967, 0.359824], 6], [26, "ALA", "O", [0.295992, 0.87864], 8], [27, "ALA", "N", [0.325, 0.71128], 7], [28, "ALA", "H", [0.106908, 0.0656888], 1], [29, "ALA", "CT", [0.339967, 0.45773], 6], [30, "ALA", "H1", [0.247135, 0.0656888], 1], [31, "ALA", "CT", [0.339967, 0.45773], 6], [32, "ALA", "HC", [0.264953, 0.0656888], 1], [33, "ALA", "HC", [0.264953, 0.0656888], 1], [34, "ALA", "HC", [0.264953, 0.0656888], 1], [35, "ALA", "C", [0.339967, 0.359824], 6], [36, "ALA", "O", [0.295992, 0.87864], 8], [37, "ALA", "N", [0.325, 0.71128], 7], [38, "ALA", "H", [0.106908, 0.0656888], 1], [39, "ALA", "CT", [0.339967, 0.45773], 6], [40, "ALA", "H1", [0.247135, 0.0656888], 1], [41, "ALA", "CT", [0.339967, 0.45773], 6], [42, "ALA", "HC", [0.264953, 0.0656888], 1], [43, "ALA", "HC", [0.264953, 0.0656888], 1], [44, "ALA", "HC", [0.264953, 0.0656888], 1], [45, "ALA", "C", [0.339967, 0.359824], 6], [46, "ALA", "O", [0.295992, 0.87864], 8], [47, "ALA", "N", [0.325, 0.71128], 7], [48, "ALA", "H", [0.106908, 0.0656888], 1], [49, "ALA", "CT", [0.339967, 0.45773], 6], [50, "ALA", "H1", [0.247135, 0.0656888], 1], [51, "ALA", "CT", [0.339967, 0.45773], 6], [52, "ALA", "HC", [0.264953, 0.0656888], 1], [53, "ALA", "HC", [0.264953, 0.0656888], 1], [54, "ALA", "HC", [0.264953, 0.0656888], 1], [55, "ALA", "C", [0.339967, 0.359824], 6], [56, "ALA", "O", [0.295992, 0.87864], 8], [57, "ALA", "N", [0.325, 0.71128], 7], [58, "ALA", "H", [0.106908, 0.0656888], 1], [59, "ALA", "CT", [0.339967, 0.45773], 6], [60, "ALA", "H1", [0.247135, 0.0656888], 1], [61, "ALA", "CT", [0.339967, 0.45773], 6], [62, "ALA", "HC", [0.264953, 0.0656888], 1], [63, "ALA", "HC", [0.264953, 0.0656888], 1], [64, "ALA", "HC", [0.264953, 0.0656888], 1], [65, "ALA", "C", [0.339967, 0.359824], 6], [66, "ALA", "O", [0.295992, 0.87864], 8], [67, "NME", "N", [0.325, 0.71128], 7], [68, "NME", "H", [0.106908, 0.0656888], 1], [69, "NME", "CT", [0.339967, 0.45773], 6], [70, "NME", "H1", [0.247135, 0.0656888], 1], [71, "NME", "H1", [0.247135, 0.0656888], 1], [72, "NME", "H1", [0.247135, 0.0656888], 1]], "bonds": [[1, 2], [1, 3], [1, 4], [1, 5], [5, 6], [5, 7], [7, 8], [7, 9], [9, 10], [9, 11], [9, 15], [11, 12], [11, 13], [11, 14], [15, 16], [15, 17], [17, 18], [17, 19], [19, 20], [19, 21], [19, 25], [21, 22], [21, 23], [21, 24], [25, 26], [25, 27], [27, 28], [27, 29], [29, 30], [29, 31], [31, 32], [31, 33], [31, 34], [35, 36], [35, 37], [37, 38], [37, 39], [39, 40], [39, 41], [39, 45], [41, 42], [41, 43], [41, 44], [45, 46], [45, 47], [47, 48], [47, 49], [49, 50], [49, 51], [49, 55], [51, 52], [51, 53], [51, 54], [55, 56], [55, 57], [57, 58], [57, 59], [59, 60], [59, 61], [59, 65], [61, 62], [61, 63], [61, 64], [65, 66], [65, 67], [67, 68], [67, 69], [69, 70], [69, 71], [69, 72]], "radicals": [29, 35]}
#%%

atoms = d["atoms"]
bonds = d["bonds"]

g, mol = graph_from_topology_dict(atoms, bonds, radicals=[])
# %%
from openff.toolkit.topology import Molecule
from rdkit.Chem.Draw import IPythonConsole


# Convert OpenFF molecule to an RDKit molecule
rdkit_mol = mol.to_rdkit()
#%%
rdkit_mol
# %%